// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Next-Auth standrad authication with provider
model User {
  id                       String     @id @default(cuid())
  name                     String?
  email                    String     @unique
  image                    String?
  emailVerified            DateTime?
  mobile                   Int?
  password                 String?
  role                     Role       @default(BUYER)
  ecoLoyaltyPoints         Int?       @default(0)
  carbonOffsetContribution Float?     @default(0)
  isEcoCertifiedSeller     Boolean?   @default(false)
  address                  Address?
  Product                  Product[]
  accounts                 Account[] // Add relation to Account
  sessions                 Session[] // Add relation to Session
  createdAt                DateTime   @default(now())
  updatedAt                DateTime   @updatedAt
  Review                   Review[]
  Cart                     Cart[]
  Wishlist                 Wishlist[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Project Schema

model Address {
  id      String  @id @default(cuid())
  street  String?
  city    String?
  state   String?
  country String?
  zipCode String?
  userId  String  @unique
  User    User    @relation(fields: [userId], references: [id])
}

model Product {
  id          String     @id @default(cuid())
  title       String
  description String
  images      String[]
  sellerId    String
  seller      User       @relation(fields: [sellerId], references: [id])
  category    String[]
  price       Int
  stocks      Int
  review      Review[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Cart        Cart[]
  Wishlist    Wishlist[]
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  Product   Product? @relation(fields: [productId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
}

model Cart {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  price     Int
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  productId String
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

// Enum

enum Role {
  BUYER
  SELLER
  ADMIN
}

// model Account {
//   id                 String  @id @default(cuid())
//   userId             String  @map("user_id")
//   type               String
//   provider           String
//   providerAccountId  String  @map("provider_account_id")
//   refresh_token      String? @db.Text
//   access_token       String? @db.Text
//   expires_at         Int?
//   token_type         String?
//   scope              String?
//   id_token           String? @db.Text
//   session_state      String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
//   @@map("accounts")
// }

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique @map("session_token")
//   userId       String   @map("user_id")
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@map("sessions")
// }

// model User {
//   id            String    @id @default(cuid())
//   firstName          String
//   lastName           String
//   password           String
//   email         String   @unique
//   emailVerified DateTime? @map("email_verified")
//   image         String?
//   phone         String
//   accounts      Account[]
//   sessions      Session[]

//   @@map("users")
// }

// model VerificationToken {
//   identifier String
//   token      String
//   expires    DateTime

//   @@unique([identifier, token])
//   @@map("verification_tokens")
// }
